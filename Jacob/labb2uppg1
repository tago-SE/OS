#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <wait.h>
#include <string.h>
/* Spawn a child process running a new program. PROGRAM is the name
of the program to run; the path will be searched for this program.
ARG_LIST is a NULL-terminated list of character strings to be
passed as the program’s argument list. Returns the process ID of
the spawned process. */
int spawn (char* program, char** arg_list)
{
    pid_t child_pid;
    /* Duplicate this process. */
    child_pid = fork ();
    if (child_pid != 0) {
        /* This is the parent process. */
       wait(0);
       // exit(0);
    } else {
        /* Now execute PROGRAM, searching for it in the path. */
        execvp (program, arg_list);
        /* The execvp function returns only if an error occurs. */
        fprintf(stderr, "an error occurred in execvp\n");
        abort ();
    }
}

int main ()
{
    /* The argument list to pass to the “ls” command. */
    char* arg_list[] = {
        "ls", /* argv[0], the name of the program. */
        "-l",
        "/",
        NULL /* The argument list must end with a NULL. */
    };

    //spawn ("ls", arg_list);
    //exit(0);

    int i = 0;

    char *userInput;
    int buffsize = 32;
    userInput = (char *)malloc(sizeof(char) * buffsize);

    printf("Add args> "); //try ls -l
    getline(&userInput, &buffsize, stdin);
    printf("org user input: %s", userInput);

    char *arrToStr[10];
    arrToStr[i] = (char*)malloc(sizeof(char) * 10);
    arrToStr[i++] = strtok(userInput, " ");
    arrToStr[i] = (char*)malloc(sizeof(char) * 10);
    while ((arrToStr[i] = strtok(NULL, " ")) != NULL) {
        i++;
        arrToStr[i] = (char*)malloc(sizeof(char) * 10);
    }

    int j = 0;
    int res = 0;
    for (j; j < 10; j++) {
        res ++;
        if (arrToStr[i-1][j] == NULL) break;
    }
    printf("size of last: %d\n", res);
    arrToStr[i-1][2] = 0; //difficult finding last char of the arr
    arrToStr[i] = "/"; i++;

    arrToStr[i] = (char*)malloc(sizeof(char) * 10);
    arrToStr[i] = "NULL";

    printf("0: %s\n", arrToStr[0]);
    printf("1: %s\n", arrToStr[1]);
    printf("2: %s\n", arrToStr[2]);
    printf("3: %s\n", arrToStr[3]);

    printf("%s", arrToStr);
    spawn(arrToStr[0], arrToStr);

  /*  returned child process ID. */
   // spawn (arrToStr[0], arrToStr);
    printf ("done with main program\n");


    return 0;
}
